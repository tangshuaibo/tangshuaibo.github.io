import{_ as n,r,o as s,c,a as e,b as l,d as t,e as i}from"./app-82f0dbc7.js";const d={},p=e("h2",{id:"_1-要求的适配效果",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-要求的适配效果","aria-hidden":"true"},"#"),l(" 1. 要求的适配效果")],-1),a={class:"custom-container tip"},h=e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8h.01"}),e("path",{d:"M11 12h1v4h1"})])],-1),u=e("p",{class:"custom-container-title"},"TIP",-1),w=e("p",null,"参考文章：",-1),x={href:"https://www.w3cplus.com/mobile/lib-flexible-for-html5-layout.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.w3cplus.com/css/vw-for-layout.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.w3cplus.com/mobile/vw-layout-in-vue.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://blog.csdn.net/u013778905/article/details/78073566",target:"_blank",rel:"noopener noreferrer"},g={href:"https://blog.csdn.net/u013778905/article/details/78343806",target:"_blank",rel:"noopener noreferrer"},f={href:"https://blog.csdn.net/u013778905/article/details/78534287",target:"_blank",rel:"noopener noreferrer"},k={href:"https://blog.csdn.net/u013778905/article/details/78729468",target:"_blank",rel:"noopener noreferrer"},b=e("p",null,"假设我们有一设计图，设计图宽度 750px（css 逻辑像素），图内某 div 块宽度 200px，该 div 块内文字大小 32px。",-1),q=e("p",null,"如果想要在屏幕宽度 375px（css 逻辑像素）的手机上完整展示该设计图，那么需要让浏览器缩小该宽度 750px 设计图的所有内容。",-1),j=e("p",null,"也就是常见的适配要求：内容布局不变，根据屏幕尺寸对网页整体等比缩放（本文不讨论根据屏幕大小改变页面整体布局的响应式适配要求）。",-1),y=e("h2",{id:"_2-关于-meta-name-viewport-content",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-关于-meta-name-viewport-content","aria-hidden":"true"},"#"),l(" 2. 关于"),e("code",null,'<meta name="viewport" content="...">')],-1),M={class:"custom-container tip"},W=e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8h.01"}),e("path",{d:"M11 12h1v4h1"})])],-1),B=e("p",{class:"custom-container-title"},"TIP",-1),C=e("p",null,"参考文章：",-1),z={href:"https://www.runoob.com/w3cnote/viewport-deep-understanding.html",target:"_blank",rel:"noopener noreferrer"},I={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Viewport_meta_tag",target:"_blank",rel:"noopener noreferrer"},T={href:"https://juejin.cn/post/7250687457799815225",target:"_blank",rel:"noopener noreferrer"},V=i("<ol><li>三种视口</li></ol><ul><li><code>&lt;meta name=&quot;viewport&quot;&gt;</code>只在移动端有效；</li><li>布局视口<code>layout viewport</code>：浏览器提供的，绘制网页的画布，宽度<code>window.innerWidth</code>；</li><li>视觉视口<code>visual viewport</code>：浏览器提供的，窥探网页的窗口，宽度<code>window.outerWidth</code>或<code>device-width</code>或<code>100vw</code>；</li><li>理想视口<code>ideal viewport</code>：浏览器可提供的，实现网页最佳浏览效果的，最理想的视觉视口；</li></ul>",2),P=e("div",{class:"custom-container tip"},[e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8h.01"}),e("path",{d:"M11 12h1v4h1"})])]),e("p",{class:"custom-container-title"},"TIP"),e("p",null,"(1). 理想视口的效果："),e("ul",null,[e("li",null,"使用渲染像素（css 逻辑像素）统一不同 dpr 高清屏的物理像素；"),e("li",null,"网页各元素在不同 dpr 屏幕上，视觉大小相同；"),e("li",null,"无需缩放手段，即可实现网页与屏幕等宽，没有窗口横向滚动条，和屏幕两侧大块空白；"),e("li",null,"例如：在物理像素宽 640px 且 dpr=2 的屏幕中，显示渲染像素宽 320px 的网页；")]),e("p",null,[l("(2). 理想视口的适配工作由浏览器完成，开发者对"),e("code",null,"width"),l("与"),e("code",null,"initial-scale"),l("的控制，只涉及“画布”与“窗口”；")]),e("p",null,[l("(3). "),e("code",null,"dpr"),l("与"),e("code",null,"initial-scale"),l("没有必然联系，只有在试图强制使浏览器，以 1px 物理像素显示 1px 渲染像素时，才涉及两者的换算；")]),e("p",null,[l("(4). "),e("code",null,"document.documentElement.width"),l("总是小于等于"),e("code",null,"window.innerWidth"),l("，即根元素"),e("code",null,"<html>"),l("的宽度不能代表画布的实际宽度；")]),e("p",null,"(5). 总之，开发者只需关系两个概念：“画布”与“窗口”；")],-1),N=i('<ol start="2"><li><code>width</code>与<code>initial-scale</code></li></ol><ul><li><code>width</code>是<code>layout viewport</code>（画布）的宽度，设置<code>width</code>目的是修改画布宽度；</li><li><code>initial-scale</code>是对画布的缩放率（本人在 chrome115 下测试得，有效范围 0.2~5），基准值是画布的实际宽度（即<code>window.innerWidth</code>）；</li><li><code>initial-scale</code>只影响视觉效果，修改它并不会改变画布及其内部元素的实际宽度；</li></ul>',2),E=e("div",{class:"custom-container tip"},[e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8h.01"}),e("path",{d:"M11 12h1v4h1"})])]),e("p",{class:"custom-container-title"},"TIP"),e("ul",null,[e("li",null,[l("对"),e("code",null,"width"),l("的显示赋值，不一定是画布最终的实际宽度，详述请看下文；")]),e("li",null,[l("使用"),e("code",null,"initial-scale"),l("对网页缩放的视觉效果，是在"),e("code",null,"window.innerWidth"),l("确定后才进行的；")]),e("li",null,[l("对开发者来说，修改"),e("code",null,"width"),l("与"),e("code",null,"initial-scale"),l("后，难以确定网页最终视觉效果的原因，是不清楚计算出画布最终实际宽度的规则；")])])],-1),H=i('<ol start="3"><li>画布宽度</li></ol><ul><li>画布默认宽度 = 窗口宽度 / 缩放率；</li><li><code>width</code>默认值 = max(画布默认宽度，网页中最宽元素的宽度)；</li><li><code>width</code>实际值 = max(<code>width</code>默认值，<code>width</code>显式赋值)；</li><li>画布实际宽度 = max(画布默认宽度，<code>width</code>实际值)；</li></ul>',2),L=e("div",{class:"custom-container tip"},[e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8h.01"}),e("path",{d:"M11 12h1v4h1"})])]),e("p",{class:"custom-container-title"},"TIP"),e("ul",null,[e("li",null,[l("缩放率（"),e("code",null,"initial-scale"),l("）既参与了对画布默认宽度的计算，也在计算出画布实际宽度后，参与了对画布的缩放；")]),e("li",null,[l("上述规则其实是在保证，画布实际宽度（"),e("code",null,"window.innerWidth"),l("）不能小于窗口宽度（"),e("code",null,"window.outerWidth"),l("）与缩放率（"),e("code",null,"initial-scale"),l("）之商；")]),e("li",null,"更直白地说，就是要保证： + 即便经过缩小后，画布中所有内容都完全显示在窗口中，也要对画布设置一个占满整个窗口的宽度； + 即便经过放大后，画布中内容超出窗口可显示范围，也要对画布设置一个可以包裹住内部所有元素的最小宽度；")])],-1),A=i('<ol start="4"><li>滚动条</li></ol><ul><li>通过对<code>layout viewport</code>（画布）缩放，让其完全在<code>visual viewport</code>（窗口）中展示，没有横向滚动条；</li><li>无滚动条：<code>window.outerWidth</code> &gt;= <code>window.innerWidth</code> * 缩放率；</li><li>有滚动条：<code>window.outerWidth</code> &lt; <code>window.innerWidth</code> * 缩放率；</li></ul><h2 id="_3-强制高清屏中边框以-1px-物理像素显示-1px-逻辑像素-即设置-border-小于-1px" tabindex="-1"><a class="header-anchor" href="#_3-强制高清屏中边框以-1px-物理像素显示-1px-逻辑像素-即设置-border-小于-1px" aria-hidden="true">#</a> 3. 强制高清屏中边框以 1px 物理像素显示 1px 逻辑像素（即设置 border 小于 1px）</h2>',3),F={class:"custom-container tip"},G=e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8h.01"}),e("path",{d:"M11 12h1v4h1"})])],-1),R=e("p",{class:"custom-container-title"},"TIP",-1),S={href:"https://juejin.cn/post/7074064874124689415",target:"_blank",rel:"noopener noreferrer"},D={href:"https://juejin.cn/post/6868559388870311950",target:"_blank",rel:"noopener noreferrer"},J={href:"https://juejin.cn/post/7005001846964092936",target:"_blank",rel:"noopener noreferrer"},K={href:"https://www.zhihu.com/question/68572428/answer/265432147",target:"_blank",rel:"noopener noreferrer"},O=e("ul",null,[e("li",null,"产品经理或者设计师可能会刻意要求：在 dpr=2 的手机上都显示出物理像素 1px 的线（也就是要将【css 逻辑像素/设备独立像素/dip】设置为 0.5px）（这种要求可能只是为了能在高清屏上让边框，看起来比在普通屏幕上更细而已）。"),e("li",null,"但是一条被设定为 css 逻辑像素 0.5px 的线，会被显示为 css 逻辑像素的 1px。这是因为大多浏览器不支持 css 设置 border 为小数，它们将 css 的 0.5px 转为 1px（也就是物理像素 2px），有些浏览器还可能将小于 0.3px 的 css 边框数值转为 0px（或者说 css 限制边框最小为 1px）。"),e("li",null,[l("为解决 dpr=2 的屏幕上 0.5px（物理像素 1px）边框被解析为 1px（物理像素 2px）的问题，一种方法是避免 border 使用小数数值，直接指定 css 逻辑像素为 1px，然后根据 dpr=2 设置"),e("code",null,"initial-scale=0.5"),l("（此时 css 逻辑像素为 1px 物理像素为 2px，但被缩放后，看起来是逻辑像素 0.5px 物理像素 1px）。")])],-1),Q=e("h2",{id:"_4-推荐的适配方案",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_4-推荐的适配方案","aria-hidden":"true"},"#"),l(" 4. 推荐的适配方案")],-1),U={class:"custom-container tip"},X=e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8h.01"}),e("path",{d:"M11 12h1v4h1"})])],-1),Y=e("p",{class:"custom-container-title"},"TIP",-1),Z=e("p",null,"参考文章：",-1),$={href:"https://juejin.cn/post/7266671630025031699",target:"_blank",rel:"noopener noreferrer"},ee={href:"https://juejin.cn/post/7217714396591915067",target:"_blank",rel:"noopener noreferrer"},le={href:"https://vant-contrib.gitee.io/vant/#/zh-CN/advanced-usage#liu-lan-qi-gua-pei",target:"_blank",rel:"noopener noreferrer"},oe={href:"https://github.com/evrone/postcss-px-to-viewport",target:"_blank",rel:"noopener noreferrer"},te={href:"https://github.com/wswmsword/postcss-mobile-forever",target:"_blank",rel:"noopener noreferrer"},ie={href:"https://github.com/lkxian888/postcss-px-to-viewport-8-plugin",target:"_blank",rel:"noopener noreferrer"},ne=i('<ol><li>【viewport 等比缩放】需要完全保证，设计稿各元素的比例及大小，必须进行网页根据屏幕大小整体缩放：</li></ol><ul><li>在 html 文件内的<code>&lt;head&gt;</code>中设置<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=no&quot;&gt;</code>；</li><li>直接根据屏幕视口宽度与设计稿宽度，生产环境中动态修改 viewport 的<code>width</code>或者<code>initial-scale</code>的值；</li></ul><ol start="2"><li>【自适应布局-手动】以设计稿为参考，基本保证各元素的比例，无需强制修改<code>initial-scale</code>：</li></ol><ul><li>在 html 文件内的<code>&lt;head&gt;</code>中设置<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=no&quot;&gt;</code>；</li><li>对 html 文件内各个元素的属性，无论是宽度、高度还是字体大小，都可直接手动使用<code>vw</code>单位使得元素大小根据屏幕大小自适应（让浏览器自己计算元素实际的像素值）；</li></ul><ol start="3"><li>【自适应布局-自动】以设计稿为参考，基本保证各元素的比例，无需强制修改<code>initial-scale</code>：</li></ol><ul><li>方案 2 中，需要开发者按照设计稿中元素大小比例，对每个元素手动计算<code>vw</code>的数值，心智负担太重；</li><li>可通过使用插件<code>postcss-px-to-viewport</code>，直接在 css 中使用 px 为单位`；</li><li>该插件会在 postcss 编译时，根据其配置项，自动按设计稿的比例将<code>px</code>单位转译为<code>vw</code>单位；</li></ul>',6),re=e("div",{class:"custom-container tip"},[e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8h.01"}),e("path",{d:"M11 12h1v4h1"})])]),e("p",{class:"custom-container-title"},"TIP"),e("p",null,"(1). 自适应布局与宽屏设备"),e("ul",null,[e("li",null,[l("由于"),e("code",null,"vw"),l("单位的参照物是屏幕宽度，于是以"),e("code",null,"vw"),l("为单位的元素，在宽屏设备下显示可能过大；")]),e("li",null,[l("这种情况，在"),e("code",null,"rem"),l("适配方案中很好处理，因其可限制根元素"),e("code",null,"font-size"),l("的最大值；")]),e("li",null,[l("一种修补方法是，只对容器元素单位用"),e("code",null,"vw"),l("，文字单位用"),e("code",null,"px"),l("（即放弃限制容器元素大小，只限制文字大小）；")]),e("li",null,[l("另一种修补方法是，通过脚本动态获取屏幕宽度，检测到屏幕过宽时，动态修改"),e("code",null,"initial-scale"),l("；")])]),e("p",null,"(2). 自适应布局与小数边框"),e("ul",null,[e("li",null,"对于线条必须显示为物理像素 1px 之类的无理要求，那不能使用方案 1 的网页整体缩放；"),e("li",null,[l("可选方法之一是以方案 2 或 3 为基础，用"),e("code",null,"px"),l("作为边框的 css 单位，根据屏幕 dpr 通过 js 动态设置 css 的"),e("code",null,"transform:scale()"),l("；")])])],-1),se=e("h2",{id:"_5-关于lib-flexible适配方案",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_5-关于lib-flexible适配方案","aria-hidden":"true"},"#"),l(" 5. 关于"),e("code",null,"lib-flexible"),l("适配方案")],-1),ce={class:"custom-container tip"},de=e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8h.01"}),e("path",{d:"M11 12h1v4h1"})])],-1),pe=e("p",{class:"custom-container-title"},"TIP",-1),ae={href:"https://github.com/amfe/lib-flexible",target:"_blank",rel:"noopener noreferrer"},he={href:"https://juejin.cn/post/7128091262791450660",target:"_blank",rel:"noopener noreferrer"},ue=e("div",{class:"custom-container warning"},[e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8v4"}),e("path",{d:"M12 16h.01"})])]),e("p",{class:"custom-container-title"},"WARNING"),e("p",null,[l("对该方法作者很久以前就做了说明： 由于"),e("code",null,"viewport"),l("单位得到众多浏览器的兼容，"),e("code",null,"lib-flexible"),l("这个过渡方案已经可以放弃使用，不管是现在的版本还是以前的版本，都存有一定的问题。建议大家开始使用"),e("code",null,"viewport"),l("来替代此方案。")])],-1),we=i('<p>这是一个过期方案，了解其原理即可：</p><ol><li>该方案解决了哪些问题：</li></ol><ul><li>用 css 的 rem 单位模拟 vw 单位，绕过多年前不同浏览器，对 vw/vh 等 viewport 单位，兼容程度不同的问题；</li><li>设置 viewport 缩放，绕过不同浏览器，对小于 1px 的 css，解析差异的问题；</li></ul><ol start="2"><li>假设屏幕 dpr 为 1，可视窗口宽度为 375px，设计稿宽度为 750px，设计稿内某 div 元素宽度 240px，如果使用 vw 作为单位：</li></ol><ul><li>(1). 100vw === 375px；</li><li>(2). 240px/750px = x/100vw，获得 x=32vw；</li><li>(3). 即在 375px 的视口中，该元素宽度占比 32%（即 375px*0.32=120px）；</li></ul><ol start="3"><li>现在要用 rem 模拟 vw，先设定 100rem === 100vw：</li></ol><ul><li>(1). 那么 100rem === 100vw === 375px；</li><li>(2). 1rem === 1vw === 3.75px；</li><li>(3). 所以应该有<code>&lt;html style=&quot;font-size: 3.75px;&quot;&gt;</code>；</li><li>(4). 上面提到的 div 元素，用 rem 表示为 32rem；</li></ul><ol start="4"><li>但是大多浏览器支持的 font-size 最小为 12px 或 10px，于是更改设定为 10rem === 100vw：</li></ol><ul><li>(1). 10rem === 100vw === 375px；</li><li>(2). 1rem === 10vw === 37.5px；</li><li>(3). 于是<code>&lt;html style=&quot;font-size: 37.5px;&quot;&gt;</code>；</li><li>(4). 然后那个 div 宽度，用 rem 表示就应该为 3.2rem（32vw === 3.2rem）；</li></ul><ol start="5"><li>如果屏幕为高清屏，那么修改<code>&lt;meta name=&quot;viewport&quot; content=&quot;...&quot;&gt;</code>进行缩放：</li></ol><ul><li>(1). 这一步的目的：为了避免因使用 css 小数数值设置边框宽度，带来的不同浏览器显示的差异，那么最简单的方法是让 css 的 1px 等于屏幕物理像素的 1px，然后直接用 css 的 px 单位设置<code>border: 1px solid;</code>；</li><li>(2). 假设屏幕 dpr=3，视口逻辑像素宽度 375px，而屏幕可显示物理像素宽度是 375px * 3 = 1125px；</li><li>(3). 如果将整个网页的 css 逻辑宽度设定为 1125px，然后再缩小整个网页以显示在 375px 的视口中；</li><li>(4). 这样修改后，会强制将 css 逻辑像素 1px，用屏幕的物理像素 1px 显示;</li><li>(5). 缩小率 scale = 1/dpr（即 1/3， 0.333333），那么设定<code>&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=0.333333&quot;&gt;</code>；</li><li>(6). 10rem === 100vw === 1125px，所以 1rem === 112.5px；</li><li>(7). 于是<code>&lt;html style=&quot;font-size: 112.5px;&quot;&gt;</code>；</li><li>(8). 然后那个占比 32%的 div，在 1125px 的网页宽度下，实际的 css 宽度为 112.5px _ 3.2rem = 360px（也就是 1125px _ 0.32 = 360px）；</li><li>(9). 抛开细节的弯弯绕绕，直观看来，无非是将宽度为 750px 的设计稿，等比拉伸为宽度 1125px 的设计稿，然后再等比缩放 0.33，以显示在逻辑像素宽度为 375px 的屏幕视口中；</li></ul><ol start="6"><li>由以上我们知道，手机淘宝早期的<code>lib-flexible</code>方案做了以下工作：</li></ol><ul><li>(1). 设定<code>&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=缩放率&quot;&gt;</code>，其中缩放率 scale = 1/dpr;</li><li>(2). 动态计算根元素 html 的 font-size（也就是 1rem），根据：10rem === 100vw === 视口宽度 * dpr；</li><li>(3). 计算目标元素的 rem 长度，无论设计稿是 640px、是 750px 还是任意宽度，只要得到目标元素在稿内的宽度占比：若占比 25%，即为 25vw，那么 width/10rem = 25vw/100vw，求得写 css 中的 width: 2.5rem;</li><li>(4). 对于强制要求以物理像素 1px 显示的边框，可以直接以 px 为单位，在 css 中使用，如<code>border: 1px solid;</code></li></ul><ol start="7"><li>注意事项：</li></ol><ul><li>(1). 根据 dpr 进行缩放的目的是，解决 css 小于 1px 在不同浏览器下显示粗细不一致的问题（如果对 css 的 0.5px 问题不敏感，这一步可以忽略）；</li><li>(2). 该方案不推荐使用 rem 作为文字的单位，推荐根据 dpr 计算 px，原因是防止出现类似 13.2333px 这种在某些浏览器上会使文字显示模糊的文字大小的情况（如果对文字模糊不敏感，这一步可以省略）；</li><li>(3). 由于动态设定了根元素 html 的 font-size，所以会改变整个页面的字体的默认大小，甚至可能是几百 px（于是需要显式重新设置默认文字大小，以消除根节点文字太大带来的影响）；</li><li>(4). 所以需要设定 body 元素的默认 font-size 为(12 * dpr)px（其中乘以 dpr 是因为，页面缩小后 12px 的文字，看起来只有 6px 甚至 4px）。</li></ul><h2 id="其它" tabindex="-1"><a class="header-anchor" href="#其它" aria-hidden="true">#</a> 其它🍜</h2><p>待续</p>',17);function xe(_e,me){const o=r("ExternalLinkIcon");return s(),c("div",null,[p,e("div",a,[h,u,w,e("ul",null,[e("li",null,[e("a",x,[l("使用 Flexible 实现手淘 H5 页面的终端适配"),t(o)])]),e("li",null,[e("a",_,[l("再聊移动端页面的适配"),t(o)])]),e("li",null,[e("a",m,[l("如何在 Vue 项目中使用 vw 实现移动端适配"),t(o)])]),e("li",null,[e("a",v,[l("移动 Web 开发基础-Viewport"),t(o)])]),e("li",null,[e("a",g,[l("移动 Web 开发基础-百分比+flex 布局方案"),t(o)])]),e("li",null,[e("a",f,[l("移动 Web 开发基础-rem 布局"),t(o)])]),e("li",null,[e("a",k,[l("移动 Web 开发基础-利用 VW 单位适配布局"),t(o)])])])]),b,q,j,y,e("div",M,[W,B,C,e("ul",null,[e("li",null,[e("a",z,[l("viewport 深入理解"),t(o)])]),e("li",null,[e("a",I,[l("viewport meta 标记"),t(o)]),l("；")]),e("li",null,[e("a",T,[l("掌握移动端适配三种视口的价值所在&理解 meta 中 width 与 initial-scale 的意义"),t(o)]),l(" 注意：本人对三视口的理解，与参考文章中的不同。")])])]),V,P,N,E,H,L,A,e("div",F,[G,R,e("ul",null,[e("li",null,[e("a",S,[l("解决移动端 1px 边框问题的几种方法"),t(o)])]),e("li",null,[e("a",D,[l("[css]为什么我们常说 1px 问题而不说 2px😵"),t(o)])]),e("li",null,[e("a",J,[l("面试官：画一个边框宽度为 0.5px 的正方形叭。"),t(o)])]),e("li",null,[e("a",K,[l("真的很想知道为什么 1px 边框会在移动端变粗？？？"),t(o)])])])]),O,Q,e("div",U,[X,Y,Z,e("ul",null,[e("li",null,[e("a",$,[l("谈谈 H5 移动端适配原理"),t(o)])]),e("li",null,[e("a",ee,[l("px2vw，移动端用 px 转 vw 适配，如何限制最大宽度"),t(o)])]),e("li",null,[e("a",le,[l("Vant4-浏览器适配-Viewport 布局"),t(o)]),l(" 仓库地址：")]),e("li",null,[e("a",oe,[l("postcss-px-to-viewport"),t(o)])]),e("li",null,[e("a",te,[l("postcss-mobile-forever"),t(o)])]),e("li",null,[e("a",ie,[l("postcss-px-to-viewport-8-plugin"),t(o)])])])]),ne,re,se,e("div",ce,[de,pe,e("p",null,[l("仓库地址："),e("a",ae,[l("amfe/lib-flexible: 可伸缩布局方案"),t(o)]),l(" 参考文章："),e("a",he,[l('为什么建议 2022 年不用"等比设计稿"+rem，而用"灵活设计稿"+px'),t(o)])])]),ue,we])}const ge=n(d,[["render",xe],["__file","yidongduanshipeiwenti.html.vue"]]);export{ge as default};
